openapi: "3.0.0"
info:
  title: "Service Catalog APIs"
  description: "This specifies a **RESTful API** for Service Catalog.\n"
  version: "1.0"
servers:
- url: "https://virtserver.swaggerhub.com/malinthaprasan/ServiceCatalog/1.0"
  description: "SwaggerHub API Auto Mocking"
- url: "https://apis.wso2.com/api/service-catalog/v1"
- url: "http://apis.wso2.com/api/service-catalog/v1"
paths:
  /service-catalogs:
    get:
      tags:
      - "Service Catalog"
      summary: "Retrieve all Service Catalogs\n"
      description: "This operation provides you all the available Service Catalogs\
        \ in the given tenant. \n"
      operationId: "getServiceCatalogs"
      responses:
        "200":
          description: "OK.\nA list of Service Catalogs is returned.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceCatalogList"
      security:
      - OAuth2Security:
        - "service_catalog:view"
  /service-catalogs/{catalogId}:
    get:
      tags:
      - "Service Catalog"
      summary: "Get details of a Service Catalog"
      description: "Using this operation, you can retrieve complete details of a single\
        \ Service Catalog using the CatalogId.\n"
      operationId: "getServiceCatalogById"
      parameters:
      - name: "catalogId"
        in: "path"
        description: "uuid of the catalog"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK.\nRequested Service Catalog is returned\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceCatalog"
        "400":
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "Not Found.\nRequested Service Catalog does not exist.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - OAuth2Security:
        - "service_catalog:view"
    put:
      tags:
      - "Service Catalog"
      summary: "Update an existing Service Catalog"
      description: "This operation can be used to update an existing Service Catalog\n"
      operationId: "updateServiceCatalog"
      parameters:
      - name: "catalogId"
        in: "path"
        description: "uuid of the catalog"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceCatalog"
        required: true
      responses:
        "200":
          description: "OK.\nUpdated Service Catalog is returned\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceCatalog"
        "400":
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "Not Found.\nRequested Service Catalog does not exist.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - OAuth2Security:
        - "service_catalog:write"
  /service-catalogs/{catalogId}/entries:
    get:
      tags:
      - "Service Catalog Entries"
      summary: "Get All entries in the registry"
      operationId: "getAllEntriesInCatalog"
      parameters:
      - name: "catalogId"
        in: "path"
        description: "uuid of the catalog"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      - name: "version"
        in: "query"
        description: "Version of the Catalog Entry"
        required: false
        style: "form"
        explode: true
        schema:
          type: "string"
      - name: "serviceType"
        in: "query"
        description: "**Search condition**.\nFilter entries by serviceType\n"
        required: false
        style: "form"
        explode: true
        schema:
          type: "string"
          enum:
          - "REST"
          - "SOAP"
          - "GRAPHQL"
          - "WS"
          - "GRPC"
          - "ASYNC_API"
      - name: "definitionType"
        in: "query"
        description: "Filter catalog entries by definitionType\n"
        required: false
        style: "form"
        explode: true
        schema:
          type: "string"
          enum:
          - "OAS"
          - "WSDL1"
          - "WSDL2"
          - "GRAPHQL_SDL"
      - name: "name"
        in: "query"
        description: "Filter catalog entries by the name of the Entry\n"
        required: false
        style: "form"
        explode: true
        schema:
          type: "string"
      - name: "displayName"
        in: "query"
        description: "Filter catalog entries by the display name of the Entry\n"
        required: false
        style: "form"
        explode: true
        schema:
          type: "string"
      - name: "sortBy"
        in: "query"
        required: false
        style: "form"
        explode: true
        schema:
          type: "string"
          enum:
          - "name"
          - "definitionType"
          - "serviceType"
      - name: "sortOrder"
        in: "query"
        required: false
        style: "form"
        explode: true
        schema:
          type: "string"
          enum:
          - "asc"
          - "desc"
      - name: "limit"
        in: "query"
        description: "Maximum limit of items to return.\n"
        required: false
        style: "form"
        explode: true
        schema:
          type: "integer"
          default: 25
      - name: "offset"
        in: "query"
        description: "Starting point within the complete list of items qualified.\n"
        required: false
        style: "form"
        explode: true
        schema:
          type: "integer"
          default: 0
      responses:
        "200":
          description: "Paginated array of entries in Registry is returned.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CatalogEntryList"
        "400":
          description: "Invalid Request\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "Not Found.\nRequested Service Catalog does not exist.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - OAuth2Security:
        - "service_catalog:entry_view"
    post:
      tags:
      - "Service Catalog Entries"
      summary: "Create a new Service Catalog Entry"
      description: "This operation can be used to create a new Service Catalog Entry\
        \ specifying the details of the Entry in the\npayload.\n"
      operationId: "createCatalogEntry"
      parameters:
      - name: "catalogId"
        in: "path"
        description: "uuid of the catalog"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CatalogEntrySchema"
      responses:
        "201":
          description: "Created.\nSuccessful response with the newly created Service\
            \ Catalog Entry as entity in the body.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CatalogEntry"
        "405":
          description: "Bad Request.\nInvalid request or validation error.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "415":
          description: "Unsupported Media Type.\nThe entity of the request was in\
            \ a not supported format.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - OAuth2Security:
        - "service_catalog:entry_write"
  /service-catalogs/{catalogId}/entries/{entryId}:
    get:
      tags:
      - "Service Catalog Entries"
      summary: "Retrieve a specific Entry in a Catalog"
      description: "Using this operation, you can retrieve a specific entry in a single\
        \ Catalog using the EntryId and CatalogId.\n"
      operationId: "getCatalogEntryByUuid"
      parameters:
      - name: "catalogId"
        in: "path"
        description: "uuid of the catalog"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      - name: "entryId"
        in: "path"
        description: "uuid of the catalog entry"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      responses:
        "200":
          description: "Requested Entry in Catalog is returned.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CatalogEntry"
        "400":
          description: "Invalid Request\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "Not Found.\nRequested Service Catalog or Entry does not exist.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - OAuth2Security:
        - "service_catalog:entry_view"
    put:
      tags:
      - "Service Catalog Entries"
      summary: "Update an existing Entry in a Service Catalog"
      description: "This operation can be used to update an existing Entry in Service\
        \ Catalog with the details of the Entry in the\n payload.\n"
      operationId: "updateCatalogEntry"
      parameters:
      - name: "catalogId"
        in: "path"
        description: "uuid of the catalog"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      - name: "entryId"
        in: "path"
        description: "uuid of the catalog entry"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CatalogEntrySchema"
      responses:
        "200":
          description: "Updated.\nSuccessful response with the newly updated Catalog\
            \ Entry as entity in the body.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CatalogEntry"
        "400":
          description: "Invalid Request\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "Not Found.\nRequested Service Catalog or Entry does not exist.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - OAuth2Security:
        - "service_catalog:entry_write"
    delete:
      tags:
      - "Service Catalog Entries"
      summary: "Delete an Entry in a Service Catalog"
      description: "This operation can be used to delete an existing Entry in Catalog\
        \ by specifying the catalogId and entryId.\n"
      operationId: "deleteCatalogEntry"
      parameters:
      - name: "catalogId"
        in: "path"
        description: "uuid of the catalog"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      - name: "entryId"
        in: "path"
        description: "uuid of the catalog entry"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      responses:
        "204":
          description: "Successfully deleted the catalog entry.\n"
        "400":
          description: "Invalid Request\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "Not Found.\nRequested Service Catalog or Entry does not exist.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - OAuth2Security:
        - "service_catalog:entry_write"
  /service-catalogs/{catalogId}/entries/{entryId}/definition:
    get:
      tags:
      - "Service Catalog Entries"
      summary: "Retrieve the definition file of a specific Entry in a Catalog"
      description: "Using this operation, you can retrieve the definition file of\
        \ a specific entry in a Catalog using the EntryId\nand CatalogId.\n"
      operationId: "getCatalogEntryDefinition"
      parameters:
      - name: "catalogId"
        in: "path"
        description: "uuid of the catalog"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      - name: "entryId"
        in: "path"
        description: "uuid of the catalog entry"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      responses:
        "200":
          description: "Updated.\nSuccessful response with the definition file as\
            \ entity in the body.\n"
          content:
            application/octet-stream:
              schema:
                type: "string"
                format: "binary"
        "400":
          description: "Invalid Request\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "Not Found.\nRequested Service Catalog or Entry does not exist.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - OAuth2Security:
        - "service_catalog:entry_view"
  /service-catalogs/{catalogId}/export-entry:
    get:
      tags:
      - "Service Catalog Entries"
      summary: "Export a given service catalog entry"
      description: "Using this operation, you can export a given entry in a Catalog\
        \ using the entryId or name/version combination.\n"
      operationId: "exportCatalogEntry"
      parameters:
      - name: "catalogId"
        in: "path"
        description: "uuid of the catalog"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      - name: "entryId"
        in: "path"
        description: "uuid of the catalog entry"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      - name: "name"
        in: "query"
        description: "The name of the Entry to export\n"
        required: false
        style: "form"
        explode: true
        schema:
          type: "string"
      - name: "version"
        in: "query"
        description: "Version of the Entry"
        required: false
        style: "form"
        explode: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Updated.\nSuccessful response with the exported service catalog\
            \ entry as a zip file. This will contain both meta-data and the definition..\n"
          content:
            application/octet-stream:
              schema:
                type: "string"
                format: "binary"
        "400":
          description: "Invalid Request\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "Not Found.\nRequested Service Catalog or Entry does not exist.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - OAuth2Security:
        - "service_catalog:entry_view"
  /service-catalogs/{catalogId}/import-entry:
    post:
      tags:
      - "Service Catalog Entries"
      summary: "Import a specific service catalog entry"
      description: "Using this operation, you can import a zipped service catalog\
        \ entry\n"
      operationId: "importCatalogEntry"
      parameters:
      - name: "catalogId"
        in: "path"
        description: "uuid of the catalog"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CatalogEntryImport"
      responses:
        "200":
          description: "Updated.\nSuccessful response with the definition file as\
            \ entity in the body.\n"
          content:
            application/octet-stream:
              schema:
                type: "string"
                format: "binary"
        "400":
          description: "Invalid Request\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "Not Found.\nRequested Service Catalog or Entry does not exist.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
      - OAuth2Security:
        - "service_catalog:entry_write"
  /settings:
    get:
      tags:
      - "Settings"
      summary: "Retrieve Service Catalog settings"
      description: "Retrieve Service Catalog settings\n"
      operationId: "getSettings"
      responses:
        "200":
          description: "OK.\nSettings returned\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Settings"
        "404":
          description: "Not Found.\nRequested Settings does not exist.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    ServiceCatalog:
      title: "Service Catalog object"
      type: "object"
      properties:
        name:
          type: "string"
          readOnly: true
          example: "default"
        id:
          type: "string"
          readOnly: true
          example: "01234567-0123-0123-0123-012345678901"
        type:
          type: "string"
          readOnly: true
          example: "wso2"
          enum:
          - "wso2"
        owner:
          type: "string"
          readOnly: true
          example: "admin"
        displayName:
          type: "string"
          example: "Dev Service Catalog"
        description:
          type: "string"
          example: "A sample description about the Service Catalog"
    ServiceCatalogList:
      title: "Service Catalog List"
      type: "object"
      properties:
        count:
          type: "integer"
          description: "Number of Service Catalogs returned.\n"
          example: 1
        list:
          type: "array"
          items:
            $ref: "#/components/schemas/ServiceCatalog"
    CatalogEntryList:
      title: "Paginated Service Catalog Entry Array"
      type: "object"
      properties:
        limit:
          type: "integer"
        offset:
          type: "integer"
        total:
          type: "integer"
        list:
          title: "Service Catalog Entry Array"
          type: "array"
          items:
            $ref: "#/components/schemas/CatalogEntry"
        pagination:
          $ref: "#/components/schemas/Pagination"
    CatalogEntry:
      title: "The Service Catalog Entry object"
      required:
      - "entryName"
      - "serviceType"
      - "version"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
          example: "01234567-0123-0123-0123-012345678901"
        entryName:
          pattern: "^[^\\*]+$"
          type: "string"
          example: "Pizzashack-Endpoint"
        displayName:
          pattern: "^[^\\*]+$"
          type: "string"
          example: "Pizzashack-Endpoint"
        description:
          type: "string"
          example: "A Catalog Entry that exposes a REST endpoint"
        version:
          type: "string"
          example: "v1"
        serviceUrl:
          type: "string"
          example: "http://localhost/pizzashack"
        serviceType:
          type: "string"
          description: "Type of the backend connecting to"
          example: "REST"
          enum:
          - "REST"
          - "SOAP"
          - "GRAPHQL"
          - "WS"
          - "GRPC"
          - "ASYNC_API"
        definitionType:
          type: "string"
          description: "The type of the provided API definition"
          example: "OAS3"
          enum:
          - "OAS2"
          - "OAS3"
          - "WSDL1"
          - "WSDL2"
          - "GRAPHQL_SDL"
        securityType:
          type: "string"
          description: "The security type of the endpoint"
          example: "BASIC"
          enum:
          - "BASIC"
          - "DIGEST"
          - "OAUTH2"
          - "NONE"
        mutualSSLEnabled:
          type: "boolean"
          description: "Whether Mutual SSL is enabled for the endpoint"
          default: false
    CatalogEntrySchema:
      title: "The Service Catalog Entry Schema object"
      required:
      - "catalogEntry"
      type: "object"
      properties:
        catalogEntry:
          $ref: "#/components/schemas/CatalogEntry"
        definitionFile:
          type: "string"
          format: "binary"
    CatalogEntryImport:
      title: "The Service Catalog Entry zip file to import"
      type: "object"
      properties:
        file:
          type: "string"
          format: "binary"
    Settings:
      title: "SettingsDTO"
      properties:
        scopes:
          type: "array"
          items:
            type: "string"
    Error:
      title: "Error object returned with 4XX HTTP Status"
      required:
      - "code"
      - "message"
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int64"
        message:
          type: "string"
          description: "Error message."
        description:
          type: "string"
          description: "A detail description about the error message.\n"
        moreInfo:
          type: "string"
          description: "Preferably an url with more details about the error.\n"
        error:
          type: "array"
          description: "If there are more than one error list them out.\nFor example,\
            \ list out validation errors by each field.\n"
          items:
            $ref: "#/components/schemas/ErrorListItem"
    ErrorListItem:
      title: "Description of individual errors that may have occurred during a request."
      required:
      - "code"
      - "message"
      type: "object"
      properties:
        code:
          type: "string"
        message:
          type: "string"
          description: "Description about individual errors occurred\n"
        description:
          type: "string"
          description: "A detail description about the error message.\n"
    Pagination:
      title: "Pagination"
      properties:
        offset:
          type: "integer"
          example: 0
        limit:
          type: "integer"
          example: 1
        total:
          type: "integer"
          example: 10
        next:
          type: "string"
          description: "Link to the next subset of resources qualified.\nEmpty if\
            \ no more resources are to be returned.\n"
        previous:
          type: "string"
          description: "Link to the previous subset of resources qualified.\nEmpty\
            \ if current subset is the first subset returned.\n"
  parameters:
    catalogId:
      name: "catalogId"
      in: "path"
      description: "uuid of the catalog"
      required: true
      style: "simple"
      explode: false
      schema:
        type: "string"
    entryId:
      name: "entryId"
      in: "path"
      description: "uuid of the catalog entry"
      required: true
      style: "simple"
      explode: false
      schema:
        type: "string"
    limit:
      name: "limit"
      in: "query"
      description: "Maximum limit of items to return.\n"
      required: false
      style: "form"
      explode: true
      schema:
        type: "integer"
        default: 25
    offset:
      name: "offset"
      in: "query"
      description: "Starting point within the complete list of items qualified.\n"
      required: false
      style: "form"
      explode: true
      schema:
        type: "integer"
        default: 0
  securitySchemes:
    OAuth2Security:
      type: "oauth2"
      flows:
        implicit:
          authorizationUrl: "https://example.com/oauth/authorize"
          scopes:
            service_catalog:view: "view service catalog"
            service_catalog:write: "update service catalog"
            service_catalog:entry_view: "view service catalog entry"
            service_catalog:entry_write: "write service catalog entry"
