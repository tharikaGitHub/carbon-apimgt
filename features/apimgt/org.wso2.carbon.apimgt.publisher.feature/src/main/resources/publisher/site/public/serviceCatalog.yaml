---
openapi: 3.0.0
info:
  title: Service Catalog APIs
  description: |
    This specifies a **RESTful API** for Service Catalog.
  version: 0.9
servers:
- url: https://virtserver.swaggerhub.com/malinthaprasan/ServiceCatalog/1.0
  description: SwaggerHub API Auto Mocking
- url: https://apis.wso2.com/api/service-catalog/v1
- url: http://apis.wso2.com/api/service-catalog/v1
paths:
  /services:
    get:
      tags:
      - Services
      summary: Retrieve/search services
      description: |
        Retrieve or search services in the service catalog of the user's organization or tenant.
      operationId: searchServices
      parameters:
      - name: name
        in: query
        description: |
          Filter services by the name of the service
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: version
        in: query
        description: |
          Filter services by version of the service
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: definitionType
        in: query
        description: |
          Filter services by definitionType
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - OAS
          - WSDL1
          - WSDL2
          - GRAPHQL_SDL
          - ASYNC_API
      - name: displayName
        in: query
        description: |
          Filter services by the display name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sortBy
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - name
          - definitionType
      - name: sortOrder
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: limit
        in: query
        description: |
          Maximum limit of items to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 25
      - name: offset
        in: query
        description: |
          Starting point within the complete list of items qualified.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: |
            Paginated matched list of services returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceList'
        "400":
          description: |
            Bad Request. Due to an invalid search parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - OAuth2Security:
        - service_catalog:entry_view
    post:
      tags:
      - Services
      summary: Create a new service
      description: "Create a new service and add it to the service catalog of the user's organization (or tenant) \nby specifying the details of the service along with its definition. \n"
      operationId: createService
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateServiceRequest'
      responses:
        "201":
          description: |
            Created.
            Successful response with the newly created service entry as the response payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        "400":
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "415":
          description: |
            Unsupported Media Type.
            The entity of the request was in a not supported format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - OAuth2Security:
        - service_catalog:entry_write
  /services/{serviceId}:
    get:
      tags:
      - Services
      summary: Get details of a service
      description: |
        Get details of a service using the id of the service.
      operationId: getServiceById
      parameters:
      - name: serviceId
        in: path
        description: uuid of the catalog entry
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            Requested service in the service catalog is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        "400":
          description: |
            Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: |
            Not Found.
            Requested service does not exist in the service catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - OAuth2Security:
        - service_catalog:entry_view
    put:
      tags:
      - Services
      summary: Update a service
      description: |
        Update a service's details and definition
      operationId: updateService
      parameters:
      - name: serviceId
        in: path
        description: uuid of the catalog entry
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateServiceRequest'
      responses:
        "200":
          description: |
            Updated.
            Successful response with the newly updated service as entity in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        "400":
          description: |
            Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: |
            Not Found.
            Requested Service does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - OAuth2Security:
        - service_catalog:entry_write
    delete:
      tags:
      - Services
      summary: Delete a service
      description: |
        Delete a service by providing the service id
      operationId: deleteService
      parameters:
      - name: serviceId
        in: path
        description: uuid of the catalog entry
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: |
            Successfully deleted the catalog entry.
        "400":
          description: |
            Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: |
            Not Found.
            Requested Service does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - OAuth2Security:
        - service_catalog:entry_write
  /services/{serviceId}/definition:
    get:
      tags:
      - Services
      summary: Retrieve a service definition
      description: |
        Retrieve the definition of a service identified by the service id.
      operationId: getServiceDefinition
      parameters:
      - name: serviceId
        in: path
        description: uuid of the catalog entry
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            Successful response with the definition file as entity in the body.
          content:
            application/json:
              schema:
                type: string
            application/yaml:
              schema:
                type: string
        "400":
          description: |
            Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: |
            Not Found.
            Requested Service does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - OAuth2Security:
        - service_catalog:entry_view
  /services/import:
    post:
      tags:
      - Services
      summary: Import a service
      description: |
        Import  a service by providing an archived service
      operationId: importService
      parameters:
      - name: serviceId
        in: path
        description: uuid of the catalog entry
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: If-Match
        in: header
        description: ETag of the service resource to update
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: overwrite
        in: query
        description: |
          Whether to overwrite if there is any existing service with the same name and version.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: |
            Successful response with the imported service metadata.
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        "400":
          description: |
            Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - OAuth2Security:
        - service_catalog:entry_create
  /services/export:
    get:
      tags:
      - Services
      summary: Export a service
      description: |
        Export a service as an archived zip file.
      operationId: exportService
      parameters:
      - name: name
        in: query
        description: |
          Name of the service to export
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: version
        in: query
        description: |
          Version of the service to export
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: |
            Successful response as the exported service as a zipped archive.
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/zip:
              schema:
                type: string
                format: binary
        "404":
          description: |
            Not Found.
            Requested Service does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - OAuth2Security:
        - service_catalog:entry_view
    head:
      tags:
      - Services
      summary: Check service existence
      description: |
        Check service existence by name and version.
        Upon successful response, this will also return the current state of the service as ETag header.
      operationId: checkServiceExistence
      parameters:
      - name: name
        in: query
        description: |
          Name of the service to export
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: version
        in: query
        description: |
          Version of the service to export
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: |
            Successful response with the available service's current state as the ETag header.
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "404":
          description: |
            Not Found.
            Requested Service does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - OAuth2Security:
        - service_catalog:entry_view
  /settings:
    get:
      tags:
      - Settings
      summary: Retrieve service catalog API settings
      description: |
        Retrieve Service Catalog API settings
      operationId: getSettings
      responses:
        "200":
          description: |
            OK.
            Settings returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        "404":
          description: |
            Not Found.
            Requested Settings does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    ServiceList:
      title: Paginated Service Catalog Entry Array
      type: object
      properties:
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
        list:
          title: Service Catalog Entry Array
          type: array
          items:
            $ref: '#/components/schemas/Service'
        pagination:
          $ref: '#/components/schemas/Pagination'
    Service:
      title: The Service Catalog Entry object
      required:
      - entryName
      - serviceType
      - version
      type: object
      properties:
        id:
          type: string
          readOnly: true
          example: 01234567-0123-0123-0123-012345678901
        name:
          pattern: ^[^\*]+$
          type: string
          example: Pizzashack-Endpoint
        displayName:
          pattern: ^[^\*]+$
          type: string
          example: Pizzashack-Endpoint
        description:
          type: string
          example: A Catalog Entry that exposes a REST endpoint
        version:
          type: string
          example: v1
        serviceUrl:
          type: string
          example: http://localhost/pizzashack
        definitionType:
          type: string
          description: The type of the provided API definition
          example: OAS3
          enum:
          - OAS2
          - OAS3
          - WSDL1
          - WSDL2
          - GRAPHQL_SDL
          - ASYNC_API
        securityType:
          type: string
          description: The security type of the endpoint
          example: BASIC
          enum:
          - BASIC
          - DIGEST
          - OAUTH2
          - NONE
        mutualSSLEnabled:
          type: boolean
          description: Whether Mutual SSL is enabled for the endpoint
          default: false
        usage:
          type: integer
          description: Number of usages of the service in APIs
          readOnly: true
          example: 1
        createdTime:
          type: string
          readOnly: true
          example: 2020-02-20T13:57:16.229
        lastUpdatedTime:
          type: string
          readOnly: true
          example: 2020-02-20T13:57:16.229
        etag:
          type: string
          description: md5 value representing current state of the service and the definition
          readOnly: true
          example: 32c890312cfadc94a7c1153f65a4f100
    CreateServiceRequest:
      title: The Service Catalog Entry Schema object
      required:
      - catalogEntry
      - definitionFile
      type: object
      properties:
        catalogEntry:
          $ref: '#/components/schemas/Service'
        definitionFile:
          type: string
          format: binary
    Settings:
      title: SettingsDTO
      properties:
        scopes:
          type: array
          items:
            type: string
    Error:
      title: Error object returned with 4XX HTTP Status
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
          description: Error message.
        description:
          type: string
          description: |
            A detail description about the error message.
        moreInfo:
          type: string
          description: |
            Preferably an url with more details about the error.
        error:
          type: array
          description: |
            If there are more than one error list them out.
            For example, list out validation errors by each field.
          items:
            $ref: '#/components/schemas/ErrorListItem'
    ErrorListItem:
      title: Description of individual errors that may have occurred during a request.
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
          description: |
            Description about individual errors occurred
        description:
          type: string
          description: |
            A detail description about the error message.
    Pagination:
      title: Pagination
      properties:
        offset:
          type: integer
          example: 0
        limit:
          type: integer
          example: 1
        total:
          type: integer
          example: 10
        next:
          type: string
          description: |
            Link to the next subset of resources qualified.
            Empty if no more resources are to be returned.
        previous:
          type: string
          description: |
            Link to the previous subset of resources qualified.
            Empty if current subset is the first subset returned.
  parameters:
    serviceId:
      name: serviceId
      in: path
      description: uuid of the catalog entry
      required: true
      style: simple
      explode: false
      schema:
        type: string
    ifMatch:
      name: If-Match
      in: header
      description: ETag of the service resource to update
      required: false
      style: simple
      explode: false
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: |
        Maximum limit of items to return.
      required: false
      style: form
      explode: true
      schema:
        type: integer
        default: 25
    offset:
      name: offset
      in: query
      description: |
        Starting point within the complete list of items qualified.
      required: false
      style: form
      explode: true
      schema:
        type: integer
        default: 0
    servicesSortBy:
      name: sortBy
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
        - name
        - definitionType
    sortOrder:
      name: sortOrder
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
        - asc
        - desc
  headers:
    ETag:
      description: A hash-like string value which represents the current state of a resource
      style: simple
      explode: false
      schema:
        type: string
  securitySchemes:
    OAuth2Security:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://example.com/oauth/authorize
          scopes:
            service_catalog:view: view service catalog
            service_catalog:write: update service catalog
            service_catalog:entry_view: view service catalog entry
            service_catalog:entry_write: write service catalog entry
